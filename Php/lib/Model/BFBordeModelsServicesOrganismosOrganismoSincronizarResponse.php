<?php
/**
 * BFBordeModelsServicesOrganismosOrganismoSincronizarResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BF.Borde.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BFBordeModelsServicesOrganismosOrganismoSincronizarResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BFBordeModelsServicesOrganismosOrganismoSincronizarResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BF.Borde.Models.Services.Organismos.OrganismoSincronizarResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organismos_guardados' => 'int',
'dependencias_guardadas' => 'int',
'organismos_eliminados' => 'int',
'resultados' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organismos_guardados' => 'int32',
'dependencias_guardadas' => 'int32',
'organismos_eliminados' => 'int32',
'resultados' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organismos_guardados' => 'organismosGuardados',
'dependencias_guardadas' => 'dependenciasGuardadas',
'organismos_eliminados' => 'organismosEliminados',
'resultados' => 'resultados'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organismos_guardados' => 'setOrganismosGuardados',
'dependencias_guardadas' => 'setDependenciasGuardadas',
'organismos_eliminados' => 'setOrganismosEliminados',
'resultados' => 'setResultados'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organismos_guardados' => 'getOrganismosGuardados',
'dependencias_guardadas' => 'getDependenciasGuardadas',
'organismos_eliminados' => 'getOrganismosEliminados',
'resultados' => 'getResultados'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organismos_guardados'] = isset($data['organismos_guardados']) ? $data['organismos_guardados'] : null;
        $this->container['dependencias_guardadas'] = isset($data['dependencias_guardadas']) ? $data['dependencias_guardadas'] : null;
        $this->container['organismos_eliminados'] = isset($data['organismos_eliminados']) ? $data['organismos_eliminados'] : null;
        $this->container['resultados'] = isset($data['resultados']) ? $data['resultados'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organismos_guardados
     *
     * @return int
     */
    public function getOrganismosGuardados()
    {
        return $this->container['organismos_guardados'];
    }

    /**
     * Sets organismos_guardados
     *
     * @param int $organismos_guardados organismos_guardados
     *
     * @return $this
     */
    public function setOrganismosGuardados($organismos_guardados)
    {
        $this->container['organismos_guardados'] = $organismos_guardados;

        return $this;
    }

    /**
     * Gets dependencias_guardadas
     *
     * @return int
     */
    public function getDependenciasGuardadas()
    {
        return $this->container['dependencias_guardadas'];
    }

    /**
     * Sets dependencias_guardadas
     *
     * @param int $dependencias_guardadas dependencias_guardadas
     *
     * @return $this
     */
    public function setDependenciasGuardadas($dependencias_guardadas)
    {
        $this->container['dependencias_guardadas'] = $dependencias_guardadas;

        return $this;
    }

    /**
     * Gets organismos_eliminados
     *
     * @return int
     */
    public function getOrganismosEliminados()
    {
        return $this->container['organismos_eliminados'];
    }

    /**
     * Sets organismos_eliminados
     *
     * @param int $organismos_eliminados organismos_eliminados
     *
     * @return $this
     */
    public function setOrganismosEliminados($organismos_eliminados)
    {
        $this->container['organismos_eliminados'] = $organismos_eliminados;

        return $this;
    }

    /**
     * Gets resultados
     *
     * @return string[]
     */
    public function getResultados()
    {
        return $this->container['resultados'];
    }

    /**
     * Sets resultados
     *
     * @param string[] $resultados resultados
     *
     * @return $this
     */
    public function setResultados($resultados)
    {
        $this->container['resultados'] = $resultados;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

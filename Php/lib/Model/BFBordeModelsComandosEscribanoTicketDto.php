<?php
/**
 * BFBordeModelsComandosEscribanoTicketDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BF.Borde.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BFBordeModelsComandosEscribanoTicketDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BFBordeModelsComandosEscribanoTicketDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BF.Borde.Models.Comandos.Escribano.TicketDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_reg_bfa' => '\Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoBlockChanRegistroItem',
'hash_ticket' => 'string',
'ticket' => '\Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoTicketDtoItem',
'raw_data' => 'string',
'leido' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_reg_bfa' => null,
'hash_ticket' => null,
'ticket' => null,
'raw_data' => null,
'leido' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_reg_bfa' => 'id_reg_bfa',
'hash_ticket' => 'hash_ticket',
'ticket' => 'ticket',
'raw_data' => 'rawData',
'leido' => 'leido'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_reg_bfa' => 'setIdRegBfa',
'hash_ticket' => 'setHashTicket',
'ticket' => 'setTicket',
'raw_data' => 'setRawData',
'leido' => 'setLeido'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_reg_bfa' => 'getIdRegBfa',
'hash_ticket' => 'getHashTicket',
'ticket' => 'getTicket',
'raw_data' => 'getRawData',
'leido' => 'getLeido'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_reg_bfa'] = isset($data['id_reg_bfa']) ? $data['id_reg_bfa'] : null;
        $this->container['hash_ticket'] = isset($data['hash_ticket']) ? $data['hash_ticket'] : null;
        $this->container['ticket'] = isset($data['ticket']) ? $data['ticket'] : null;
        $this->container['raw_data'] = isset($data['raw_data']) ? $data['raw_data'] : null;
        $this->container['leido'] = isset($data['leido']) ? $data['leido'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_reg_bfa
     *
     * @return \Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoBlockChanRegistroItem
     */
    public function getIdRegBfa()
    {
        return $this->container['id_reg_bfa'];
    }

    /**
     * Sets id_reg_bfa
     *
     * @param \Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoBlockChanRegistroItem $id_reg_bfa id_reg_bfa
     *
     * @return $this
     */
    public function setIdRegBfa($id_reg_bfa)
    {
        $this->container['id_reg_bfa'] = $id_reg_bfa;

        return $this;
    }

    /**
     * Gets hash_ticket
     *
     * @return string
     */
    public function getHashTicket()
    {
        return $this->container['hash_ticket'];
    }

    /**
     * Sets hash_ticket
     *
     * @param string $hash_ticket hash_ticket
     *
     * @return $this
     */
    public function setHashTicket($hash_ticket)
    {
        $this->container['hash_ticket'] = $hash_ticket;

        return $this;
    }

    /**
     * Gets ticket
     *
     * @return \Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoTicketDtoItem
     */
    public function getTicket()
    {
        return $this->container['ticket'];
    }

    /**
     * Sets ticket
     *
     * @param \Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoTicketDtoItem $ticket ticket
     *
     * @return $this
     */
    public function setTicket($ticket)
    {
        $this->container['ticket'] = $ticket;

        return $this;
    }

    /**
     * Gets raw_data
     *
     * @return string
     */
    public function getRawData()
    {
        return $this->container['raw_data'];
    }

    /**
     * Sets raw_data
     *
     * @param string $raw_data raw_data
     *
     * @return $this
     */
    public function setRawData($raw_data)
    {
        $this->container['raw_data'] = $raw_data;

        return $this;
    }

    /**
     * Gets leido
     *
     * @return \DateTime
     */
    public function getLeido()
    {
        return $this->container['leido'];
    }

    /**
     * Sets leido
     *
     * @param \DateTime $leido leido
     *
     * @return $this
     */
    public function setLeido($leido)
    {
        $this->container['leido'] = $leido;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * BFBordeModelsComandosEscribanoTicketDtoTicketDtoItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BF.Borde.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BFBordeModelsComandosEscribanoTicketDtoTicketDtoItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BFBordeModelsComandosEscribanoTicketDtoTicketDtoItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BF.Borde.Models.Comandos.Escribano.TicketDto+TicketDtoItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transacciones' => '\Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoTransaccionDto[]',
'uuid_operacion' => 'string',
'uuid_respuesta' => 'string',
'motivo_estado' => 'string',
'estado' => 'string',
'nro_ticket' => 'string',
'firma_electronica' => 'string',
'timestamp' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transacciones' => null,
'uuid_operacion' => null,
'uuid_respuesta' => null,
'motivo_estado' => null,
'estado' => null,
'nro_ticket' => null,
'firma_electronica' => null,
'timestamp' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transacciones' => 'transacciones',
'uuid_operacion' => 'uuid_operacion',
'uuid_respuesta' => 'uuid_respuesta',
'motivo_estado' => 'motivo_estado',
'estado' => 'estado',
'nro_ticket' => 'nro_ticket',
'firma_electronica' => 'firma_electronica',
'timestamp' => 'timestamp'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transacciones' => 'setTransacciones',
'uuid_operacion' => 'setUuidOperacion',
'uuid_respuesta' => 'setUuidRespuesta',
'motivo_estado' => 'setMotivoEstado',
'estado' => 'setEstado',
'nro_ticket' => 'setNroTicket',
'firma_electronica' => 'setFirmaElectronica',
'timestamp' => 'setTimestamp'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transacciones' => 'getTransacciones',
'uuid_operacion' => 'getUuidOperacion',
'uuid_respuesta' => 'getUuidRespuesta',
'motivo_estado' => 'getMotivoEstado',
'estado' => 'getEstado',
'nro_ticket' => 'getNroTicket',
'firma_electronica' => 'getFirmaElectronica',
'timestamp' => 'getTimestamp'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transacciones'] = isset($data['transacciones']) ? $data['transacciones'] : null;
        $this->container['uuid_operacion'] = isset($data['uuid_operacion']) ? $data['uuid_operacion'] : null;
        $this->container['uuid_respuesta'] = isset($data['uuid_respuesta']) ? $data['uuid_respuesta'] : null;
        $this->container['motivo_estado'] = isset($data['motivo_estado']) ? $data['motivo_estado'] : null;
        $this->container['estado'] = isset($data['estado']) ? $data['estado'] : null;
        $this->container['nro_ticket'] = isset($data['nro_ticket']) ? $data['nro_ticket'] : null;
        $this->container['firma_electronica'] = isset($data['firma_electronica']) ? $data['firma_electronica'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transacciones
     *
     * @return \Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoTransaccionDto[]
     */
    public function getTransacciones()
    {
        return $this->container['transacciones'];
    }

    /**
     * Sets transacciones
     *
     * @param \Swagger\Client\Model\BFBordeModelsComandosEscribanoTicketDtoTransaccionDto[] $transacciones transacciones
     *
     * @return $this
     */
    public function setTransacciones($transacciones)
    {
        $this->container['transacciones'] = $transacciones;

        return $this;
    }

    /**
     * Gets uuid_operacion
     *
     * @return string
     */
    public function getUuidOperacion()
    {
        return $this->container['uuid_operacion'];
    }

    /**
     * Sets uuid_operacion
     *
     * @param string $uuid_operacion uuid_operacion
     *
     * @return $this
     */
    public function setUuidOperacion($uuid_operacion)
    {
        $this->container['uuid_operacion'] = $uuid_operacion;

        return $this;
    }

    /**
     * Gets uuid_respuesta
     *
     * @return string
     */
    public function getUuidRespuesta()
    {
        return $this->container['uuid_respuesta'];
    }

    /**
     * Sets uuid_respuesta
     *
     * @param string $uuid_respuesta uuid_respuesta
     *
     * @return $this
     */
    public function setUuidRespuesta($uuid_respuesta)
    {
        $this->container['uuid_respuesta'] = $uuid_respuesta;

        return $this;
    }

    /**
     * Gets motivo_estado
     *
     * @return string
     */
    public function getMotivoEstado()
    {
        return $this->container['motivo_estado'];
    }

    /**
     * Sets motivo_estado
     *
     * @param string $motivo_estado motivo_estado
     *
     * @return $this
     */
    public function setMotivoEstado($motivo_estado)
    {
        $this->container['motivo_estado'] = $motivo_estado;

        return $this;
    }

    /**
     * Gets estado
     *
     * @return string
     */
    public function getEstado()
    {
        return $this->container['estado'];
    }

    /**
     * Sets estado
     *
     * @param string $estado estado
     *
     * @return $this
     */
    public function setEstado($estado)
    {
        $this->container['estado'] = $estado;

        return $this;
    }

    /**
     * Gets nro_ticket
     *
     * @return string
     */
    public function getNroTicket()
    {
        return $this->container['nro_ticket'];
    }

    /**
     * Sets nro_ticket
     *
     * @param string $nro_ticket nro_ticket
     *
     * @return $this
     */
    public function setNroTicket($nro_ticket)
    {
        $this->container['nro_ticket'] = $nro_ticket;

        return $this;
    }

    /**
     * Gets firma_electronica
     *
     * @return string
     */
    public function getFirmaElectronica()
    {
        return $this->container['firma_electronica'];
    }

    /**
     * Sets firma_electronica
     *
     * @param string $firma_electronica firma_electronica
     *
     * @return $this
     */
    public function setFirmaElectronica($firma_electronica)
    {
        $this->container['firma_electronica'] = $firma_electronica;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

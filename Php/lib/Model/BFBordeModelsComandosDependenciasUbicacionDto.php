<?php
/**
 * BFBordeModelsComandosDependenciasUbicacionDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BF.Borde.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BFBordeModelsComandosDependenciasUbicacionDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BFBordeModelsComandosDependenciasUbicacionDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BF.Borde.Models.Comandos.Dependencias.UbicacionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ciudad' => 'string',
'calle' => 'string',
'numero' => 'string',
'piso_dpto' => 'string',
'cp' => 'string',
'nombre_agrup_geo' => 'string',
'tipo_agrup_geo' => 'string',
'georef' => '\Swagger\Client\Model\BFBordeModelsComandosDependenciasUbicacionDtoGeoRefDto'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ciudad' => null,
'calle' => null,
'numero' => null,
'piso_dpto' => null,
'cp' => null,
'nombre_agrup_geo' => null,
'tipo_agrup_geo' => null,
'georef' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ciudad' => 'ciudad',
'calle' => 'calle',
'numero' => 'numero',
'piso_dpto' => 'piso_dpto',
'cp' => 'cp',
'nombre_agrup_geo' => 'nombre_agrup_geo',
'tipo_agrup_geo' => 'tipo_agrup_geo',
'georef' => 'georef'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ciudad' => 'setCiudad',
'calle' => 'setCalle',
'numero' => 'setNumero',
'piso_dpto' => 'setPisoDpto',
'cp' => 'setCp',
'nombre_agrup_geo' => 'setNombreAgrupGeo',
'tipo_agrup_geo' => 'setTipoAgrupGeo',
'georef' => 'setGeoref'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ciudad' => 'getCiudad',
'calle' => 'getCalle',
'numero' => 'getNumero',
'piso_dpto' => 'getPisoDpto',
'cp' => 'getCp',
'nombre_agrup_geo' => 'getNombreAgrupGeo',
'tipo_agrup_geo' => 'getTipoAgrupGeo',
'georef' => 'getGeoref'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ciudad'] = isset($data['ciudad']) ? $data['ciudad'] : null;
        $this->container['calle'] = isset($data['calle']) ? $data['calle'] : null;
        $this->container['numero'] = isset($data['numero']) ? $data['numero'] : null;
        $this->container['piso_dpto'] = isset($data['piso_dpto']) ? $data['piso_dpto'] : null;
        $this->container['cp'] = isset($data['cp']) ? $data['cp'] : null;
        $this->container['nombre_agrup_geo'] = isset($data['nombre_agrup_geo']) ? $data['nombre_agrup_geo'] : null;
        $this->container['tipo_agrup_geo'] = isset($data['tipo_agrup_geo']) ? $data['tipo_agrup_geo'] : null;
        $this->container['georef'] = isset($data['georef']) ? $data['georef'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ciudad
     *
     * @return string
     */
    public function getCiudad()
    {
        return $this->container['ciudad'];
    }

    /**
     * Sets ciudad
     *
     * @param string $ciudad ciudad
     *
     * @return $this
     */
    public function setCiudad($ciudad)
    {
        $this->container['ciudad'] = $ciudad;

        return $this;
    }

    /**
     * Gets calle
     *
     * @return string
     */
    public function getCalle()
    {
        return $this->container['calle'];
    }

    /**
     * Sets calle
     *
     * @param string $calle calle
     *
     * @return $this
     */
    public function setCalle($calle)
    {
        $this->container['calle'] = $calle;

        return $this;
    }

    /**
     * Gets numero
     *
     * @return string
     */
    public function getNumero()
    {
        return $this->container['numero'];
    }

    /**
     * Sets numero
     *
     * @param string $numero numero
     *
     * @return $this
     */
    public function setNumero($numero)
    {
        $this->container['numero'] = $numero;

        return $this;
    }

    /**
     * Gets piso_dpto
     *
     * @return string
     */
    public function getPisoDpto()
    {
        return $this->container['piso_dpto'];
    }

    /**
     * Sets piso_dpto
     *
     * @param string $piso_dpto piso_dpto
     *
     * @return $this
     */
    public function setPisoDpto($piso_dpto)
    {
        $this->container['piso_dpto'] = $piso_dpto;

        return $this;
    }

    /**
     * Gets cp
     *
     * @return string
     */
    public function getCp()
    {
        return $this->container['cp'];
    }

    /**
     * Sets cp
     *
     * @param string $cp cp
     *
     * @return $this
     */
    public function setCp($cp)
    {
        $this->container['cp'] = $cp;

        return $this;
    }

    /**
     * Gets nombre_agrup_geo
     *
     * @return string
     */
    public function getNombreAgrupGeo()
    {
        return $this->container['nombre_agrup_geo'];
    }

    /**
     * Sets nombre_agrup_geo
     *
     * @param string $nombre_agrup_geo nombre_agrup_geo
     *
     * @return $this
     */
    public function setNombreAgrupGeo($nombre_agrup_geo)
    {
        $this->container['nombre_agrup_geo'] = $nombre_agrup_geo;

        return $this;
    }

    /**
     * Gets tipo_agrup_geo
     *
     * @return string
     */
    public function getTipoAgrupGeo()
    {
        return $this->container['tipo_agrup_geo'];
    }

    /**
     * Sets tipo_agrup_geo
     *
     * @param string $tipo_agrup_geo tipo_agrup_geo
     *
     * @return $this
     */
    public function setTipoAgrupGeo($tipo_agrup_geo)
    {
        $this->container['tipo_agrup_geo'] = $tipo_agrup_geo;

        return $this;
    }

    /**
     * Gets georef
     *
     * @return \Swagger\Client\Model\BFBordeModelsComandosDependenciasUbicacionDtoGeoRefDto
     */
    public function getGeoref()
    {
        return $this->container['georef'];
    }

    /**
     * Sets georef
     *
     * @param \Swagger\Client\Model\BFBordeModelsComandosDependenciasUbicacionDtoGeoRefDto $georef georef
     *
     * @return $this
     */
    public function setGeoref($georef)
    {
        $this->container['georef'] = $georef;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
